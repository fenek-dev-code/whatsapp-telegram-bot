import { makeWASocket, useMultiFileAuthState, DisconnectReason } from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import path from 'path';
import { fileURLToPath } from 'url';
import { findMatch } from './validation.js';
import dotenv from 'dotenv'; // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
dotenv.config();

const api_secret = "secret";
const allowedChats = process.env.WHATSAPP_ALLOWED_CHATS.split(',');
const on_chats = process.env.WHATSAPP_ON_CHATS.toLowerCase();


// 1. –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ES-–º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const { state, saveCreds } = await useMultiFileAuthState(path.join(__dirname, 'auth'));

// 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const startBot = async () => {
    const sock = makeWASocket({
        auth: state,
        browser: ['MyBot', 'Chrome', '1.0'],
        markOnlineOnConnect: true,
    });

    // 4. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç qrcode-terminal
    let qrcode;
    try {
        const qrModule = await import('qrcode-terminal');
        qrcode = qrModule.default;
    } catch (err) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å qrcode-terminal:', err);
        process.exit(1);
    }

    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ QR-–∫–æ–¥–∞
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;  
        if (qr) {
            console.log('üîç –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥:');
            qrcode.generate(qr, { small: true });
        }
        
        if (connection === 'close') {
            const shouldReconnect = (lastDisconnect.error instanceof Boom)?.output?.statusCode !== DisconnectReason.loggedOut;
            console.log('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', shouldReconnect);
            if (shouldReconnect) startBot();
        } else if (connection === 'open') {
            console.log('‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WhatsApp!');
        }
    });

    // 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sock.ev.on('creds.update', saveCreds);

    // 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    sock.ev.on('messages.upsert', async ({ messages }) => {
        const msg = messages[0];
        if (!allowedChats.includes(msg.key.remoteJid)){
            if (on_chats == "false") {
                return
            }
        };

        const text = msg.message?.conversation || msg.message?.extendedTextMessage?.text || '';
        if (text.toLowerCase() === '!chat_id') {
            await sock.sendMessage(msg.key.remoteJid, { text: `ID —á–∞—Ç–∞: ${msg.key.remoteJid}` });
        }
        if (!msg.key.fromMe) {
            const number = msg.key.participant?.split('@')[0] || '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞';
            await send_message_bot(text, number);
            console.log(`üì©[${number}]: ${text}`);
            const category = findMatch(text);
            if (category !== null) {
                await send_message_bot(text, number, category);
            }
        }
    });

    return sock;
};

// 8. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try {
    const sock = await startBot();
    console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
        await sock.end();
        process.exit(0);
    });
} catch (err) {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
}


async function send_message_bot(text, number, category) {
    fetch(`http://localhost:8080/webhook/whatsapp/${api_secret}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            "text":text,
            "number":number,
            "category":category
        }),
    })
}